

using Ovasoft.Cofitools.Domain.Model;

namespace Ovasoft.Cofitools.Domain.Model.Abstracts;

/// <summary>An abstract class that represents a simple entity, with the identifier being of type int by default.<br /></summary>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for AEntity
public class AEntity: AEntity<int> { }

/// <summary>An abstract class that implements the default entity (the entity identifier is int) associated with the child entity.<br /></summary>
/// <typeparam name="TChild">The type of the child entity.</typeparam>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for AEntityRoot`1
public class AEntityRoot<TChild>: AEntityRoot<int, TChild> where TChild : class, IEntityBase { }

/// <summary>An abstract class representing a simple entity that implements a relationship with the parent entity,
/// with the default int type identifier.</summary>
/// <typeparam name="TParent">The type of the parent entity.</typeparam>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for AEntityChild`1
public class AEntityChild<TParent>: AEntityChild<int, TParent> where TParent : class, IEntityBase { }

/// <summary>An abstract class representing a simple entity that implements a relationship with both parent and child entities, with a default int type identifier.</summary>
/// <typeparam name="TParent">The type of the parent entity.</typeparam>
/// <typeparam name="TChild">The type of the child entity.</typeparam>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for AEntityBetween`2
public class AEntityBetween<TParent, TChild>: AEntityBetween<int, TParent, TChild>
    where TParent : class, IEntityBase
    where TChild : class, IEntityBase
{ }