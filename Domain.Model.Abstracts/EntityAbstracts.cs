

using System.Collections.Generic;

namespace BaikalNetHub.CodeFirst.Domain.Model.Abstracts;

/// <summary>Abstract class implements simple entity.</summary>
/// <typeparam name="TEntityId">Type of entity identifier.</typeparam>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for AEntity`1
public class AEntity<TEntityId>: IEntity<TEntityId> where TEntityId : struct
{
    /// <summary>Get or set the identifier of entity.</summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for Id
    public TEntityId Id { get; set; }
}

/// <summary>Abstract class implements entity, relations with child entity.</summary>
/// <typeparam name="TEntityId">Type of entity identifier.</typeparam>
/// <typeparam name="TChild">Type of child entity.</typeparam>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for AEntityRoot`2
public class AEntityRoot<TEntityId, TChild>: AEntity<TEntityId>, IChild<TChild>
    where TEntityId : struct
    where TChild : class, IEntityBase
{
    /// <summary>Get or set the child entity.</summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for Childs
    public ICollection<TChild> Children { get; set; }
}

/// <summary>The abstract class implements entity relations with parent entity</summary>
/// <typeparam name="TEntityId">The type of the entity identifier.</typeparam>
/// <typeparam name="TParent">The type of the parent entity.</typeparam>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for AEntityChild`2
public class AEntityChild<TEntityId, TParent>: AEntity<TEntityId>, IParent<TEntityId, TParent>
    where TEntityId : struct
    where TParent : class, IEntityBase
{
    /// <summary>Gets or sets the parent identifier.</summary>
    /// <value>The parent entity identifier.</value>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for ParentId
    public TEntityId ParentId { get; set; }
    /// <summary>Gets or sets the parent entity.</summary>
    /// <value>The parent as entity.</value>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for Parent
    public TParent Parent { get; set; }
}
/// <summary>The abstract class implements entity relations with parent entity and child entity.</summary>
/// <typeparam name="TEntityId">The type of the entity identifier.</typeparam>
/// <typeparam name="TParent">The type of the parent entity.</typeparam>
/// <typeparam name="TChild">The type of the child entity.</typeparam>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for AEntityBetween`3
public class AEntityBetween<TEntityId, TParent, TChild>: AEntityChild<TEntityId, TParent>, IChild<TChild>
    where TEntityId : struct
    where TParent : class, IEntityBase
    where TChild : class, IEntityBase
{
    /// <summary>Get or set the child entity.</summary>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for Childs
    public ICollection<TChild> Children { get; set; }
}