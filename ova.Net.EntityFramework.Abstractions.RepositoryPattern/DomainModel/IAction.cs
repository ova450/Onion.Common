namespace OVASOFT.NET.EF.Onion.Abstractions.DomainModel;

/// <summary>interface implementing property  ActionDate to entity.</summary>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for IEntityActionDate
public interface IActionDate
{
    /// <summary>Gets or sets the action date.</summary>
    /// <value>The action date.</value>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for ActionDate
    DateTime ActionDate { get; set; }
}

// IENTITYACTIONUSER

/// <summary>Interface implementing property UserId to entity.</summary>
/// <typeparam name="TUserId">The type of the user identifier.</typeparam>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for IEntityActionUser`1
public interface IActionUser<TUserId>: IActionDate
{
    /// <summary>Gets or sets the user identifier.</summary>
    /// <value>The user identifier.</value>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for UserId
    TUserId UserId { get; set; }
}

/// <summary>Interface implementing property UserId as <strong>int</strong> to entity.</summary>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for IEntityActionUser`1
public interface IActionUser: IActionUser<int> { }


// IENTITYACTION

/// <summary>Interface implementing property Action to entity.</summary>
/// <typeparam name="TAction">The type of the action, where type must be <strong>Enum</strong>.</typeparam>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for IEntityAction`1
public interface IAction<TAction> where TAction : Enum
{
    /// <summary>Gets or sets the property Action.</summary>
    /// <value><em>The property Action value as <strong>Enum</strong></em></value>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for Action
    TAction Action { get; set; }
}

/// <summary>Interface implementing property Action to entity.</summary>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for IEntityAction`1
public interface IAction
{
    /// <summary>Gets or sets the property Action.</summary>
    /// <value><em>The property Action value as <strong>string</strong></em></value>
    /// <autogeneratedoc />
    /// TODO Edit XML Comment Template for Action
    string Action { get; set; }
}

// IENTITYACTIONHISTORY


/// <summary>The implementation of this interface creates a separate child entity to store the history changes of base entity.</summary>
/// <typeparam name="THistoryId">The type of this history entity identifier.</typeparam>
/// <typeparam name="TBaseEntityId">The type of the base identifier.</typeparam>
/// <typeparam name="TBaseEntity">The type of the base entity.</typeparam>
/// <typeparam name="TUserEntityId">The type of the user entity identifier.</typeparam>
/// <typeparam name="TUserEntity">The type of the user entity.</typeparam>
/// <typeparam name="TAction">The type of the action as Enum.</typeparam>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for IActionHistory`6
public interface IActionHistory<THistoryId, TBaseEntityId, TBaseEntity, TUserEntityId, TUserEntity, TAction>:
    IEntity<THistoryId> where THistoryId : struct,
    IParent<TBaseEntityId, TBaseEntity> where TBaseEntityId : struct where TBaseEntity : class, IEntity,
    IParent<TUserEntityId, TUserEntity> where TUserEntityId : struct where TUserEntity : class, IEntity,
    IAction<TAction> where TAction : Enum,
    IActionDate
{ }

/// <summary>The implementation of this interface creates a separate child entity to store the history changes of base entity.</summary>
/// <typeparam name="THistoryId">The type of this history entity identifier.</typeparam>
/// <typeparam name="TBaseEntityId">The type of the base identifier.</typeparam>
/// <typeparam name="TBaseEntity">The type of the base entity.</typeparam>
/// <typeparam name="TUserEntityId">The type of the user entity identifier.</typeparam>
/// <typeparam name="TUserEntity">The type of the user entity.</typeparam>
/// <autogeneratedoc />
/// TODO Edit XML Comment Template for IActionHistory`6
public interface IActionHistory<THistoryId, TBaseEntityId, TBaseEntity, TUserEntityId, TUserEntity>:
    IEntity<THistoryId> where THistoryId : struct,
    IParent<TBaseEntityId, TBaseEntity> where TBaseEntityId : struct where TBaseEntity : class, IEntity,
    IParent<TUserEntityId, TUserEntity> where TUserEntityId : struct where TUserEntity : class, IEntity,
    IAction,
    IActionDate
{ }

